log(0.0007760148249)
log(0.0023622204365)
data3 %>% sum
data3$quant  %>% sum
data3 %>% sum %>% 0.0023622204365 / .
data3 %>% sum %>% 0.0023622204365 / .x
data3 %>% sum %>% ~ 0.0023622204365 / .x
data3 %>% sum %>% ~ (.x)  0.0023622204365 / .x
unidades_est
log(-6012)
market_size
unidades_est
view(unidades_est)
sum(unidades_est)
data3 <- data %>% mutate(unidades_estimadas = round(exp(market_size$fitted.values)))
total <- aggregate(unidades_est ~ id_modelo + ano, data = data3, sum, na.rm = T)
View(total)
total$unidades_est %>% sum()
names(total)[3] <- "total_units"
data3 <- merge(data3, total, by=c("id_modelo", "ano"))
data3$quant %>% sum()
df_unidades_estimadas <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
#install.packages(c("readxl","tidyverse","caret","glm"))
#install.packages("broom")
#install.packages("RTools")
#install.packages("glmnet")
#install.packages("lars")
#install.packages("stargazer")
#install.packages("dismo")
#install.packages("gbm")
#install.packages("lmtest")
#install.packages("plm")
library(caret)
library(tidyverse)
library(broom)
library(readxl)
library(glmnet)
library(magrittr)
library(stargazer)
library(gbm)
library(dplyr)
library(lmtest)
library(plm)
#Data Cleaning
data <- readxl::read_xlsx("base_tcc.xlsx")
colunas_fator <- c("ano", "combust", "modelo", "marca",
"marca_trad","gas","ar","dir","vid","trv","kit conf",
"aut","abs","bag")
data[colunas_fator] <- lapply(data[colunas_fator], factor)
data <- data %>% mutate(tipo_modelo = case_when(POP == 1 ~    1,
COMPAC == 1 ~ 2,
HATCH == 1 ~  3,
SEDPOP == 1 ~ 4,
SEDMED == 1 ~ 5,
SEDLUXO == 1 ~ 6,
MINIVAN == 1 ~ 7,
PERUA == 1 ~ 8
))
data <- data %>% dplyr::select(-ano09, -ano10, -ano11, -ano12, -POP, -COMPAC ,
-HATCH, -SEDPOP, -SEDMED, -SEDLUXO, -MINIVAN, -PERUA)
data <- data %>% mutate(comp = comp * 1000)
modelos <- data.frame(modelo = levels(data$modelo), id_modelo = c(1:length(levels(data$modelo))))
combust <- data.frame(combust = levels(data$combust), id_combust = c(1:length(levels(data$combust))))
marca <- data.frame(marca = levels (data$marca), id_marca = c(1:length(levels(data$marca))))
data <- data %>% mutate(preco = log(preco)) %>% rename(logpreco = preco)
#converter modelo para numeros
data <- data %>% left_join(., modelos, by = "modelo") %>% select(-modelo) %>%
mutate(id_modelo = as.factor(id_modelo))
data <- data %>% left_join(., combust, by = "combust") %>% select(-combust) %>%
mutate(id_combust = as.factor(id_combust))
data <- data %>% left_join(., marca, by = "marca") %>% select(-marca) %>%
mutate(id_marca = as.factor(id_marca))
data <- data %>% mutate(
id_modelo = as.factor(id_modelo),
id_combust = as.factor(id_combust),
id_marca = as.factor(id_marca),
tipo_modelo = as.factor(tipo_modelo)
)
qntf <- function(a) {
return(length(levels(a)))
}
group <- map2(data, 1:ncol(data), function(.x, .y) {
if(is.null(levels(.x))){
c(rep(.y, 1))
}
else(
c(rep(.y,length(levels(.x))))[-1]
)
}) %>% unlist(use.names= F)
set.seed(123)
##
df_sample <- sample_frac(data, 0.8)
train_index <- as.numeric(rownames(df_sample))
test.x <- data[-train_index, ] %>% select(-quant) %>% as.matrix()
train.x <- df_sample %>% select(-quant)
train.y <- df_sample %>% select(quant)
test.y <- data %>% select(quant) %>% setdiff(train.y) %>% data.matrix(.)
#covariaveis
X_int <- model.matrix(~ (.)^2 -1 , data = train.x)
X <- model.matrix(~ .-1 , data = train.x)
share_formula <- formula(share ~ . - unidades_est - total_uni - 1)
model.matrix(~id_modelo - 1,train.x)
#cbind(model)
#outcome
y <- train.y %>% scale(center = T, scale = F)
#Y <- data %>% dplyr::select(quant)
#10 fold cross-validation
lasso_cv <- cv.glmnet(X, y, alpha = 1,
standardize = T, nfolds = 10)
lasso_cv_int <- cv.glmnet(X_int, y, alpha = 1,
standardize = T, nfolds = 10)
best_lamb <- lasso_cv_int$lambda.min
plot(lasso_cv)
#modelo lasso
#como modelar: https://stats.stackexchange.com/questions/72251/an-example-lasso-regression-using-glmnet-for-binary-outcome
modelo_lasso <- glmnet(X, y, alpha = 1)
modelo_cv <- glmnet(data.matrix(train.x), y, alpha = 1, lambda = lasso_cv$lambda.min)
modelo_cv_int <- glmnet(as.matrix(X_int), y, alpha = 1, lambda = lasso_cv_int$lambda.min)
plot(modelo, xvar = "norm", label = T)
plot(modelo, xvar="lambda")
plot(modelo_cv, xvar = "norm", label = T)
plot(modelo_cv,xvar="lambda")
coef(modelo_cv)
## Predict with LASSO
predictions <- predict(modelo, newx = test.x, s = lasso_cv$lambda.min)
predictions_cv <- predict(object = modelo_cv, newx = test.x, s = lasso_cv$lambda.min)
predictions_cv_int <- predict(object = modelo_cv_int, newx = test.x, s = lasso_cv_int$lambda.min)
# Test the predictions
RMSE(test.y, predictions_cv)
RMSE(test.y[1:103], pred = predictions_cv)
#Logit
#sem o gradient boosting
##### Market Size
#estimando o tamanho do mercado em cada ano
#ou o Market Size
market_size <- lm(log(quant) ~ ano + id_modelo, data=data)
#app
#
#data4$unidades_est <- round(exp(market_size$fitted.values))
#data4 <- train.data %>% group_by(ano) %>%
#  summarise(unidades_totais_hat = sum(unidades_est)) %>%
#  left_join(data, ., by = "ano") %>%
#  mutate(share2 = unidades_est / unidades_totais_hat)
#
#total <- aggregate(unidades_est ~ ano + modelo, data = data, sum, na.rm = T) %>%
#  left_join(data, ., by=c("ano, modelo")) %>%
#  rename(unidades_est = unidades_totais_hat)
#  mutate(share2 = unidades_est / unidades_totais)
unidades_est <- round(exp(market_size$fitted.values))
df_unidades_estimadas <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
total <- data3 %>%
group_by(ano) %>%
summarise(total_unidades = sum(unidades_est))
data3 <- left_join(data, df_unidades_estimadas, by= c("ano", "modelo"))
######https://rpubs.com/rslbliss/r_logistic_ws
X_logit <- data3 %>% select(share)
Y_logit <- data3 %>% select(-share)
logit_model <- glm(log(share) ~ . - unidades_est - total_uni - 1,
data=data3, family="binomial", alpha = 1)
coeftest(logit_model, vcov. = vcov, type = "HC1")
summary(data)
unidades_est <- round(exp(market_size$fitted.values))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
total <- data3 %>%
group_by(ano) %>%
summarise(total_unidades = sum(unidades_est))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
data3 <- left_join(data3, df_unidades_estimadas, by= c("ano", "modelo"))
data3 <- left_join(data3, df_unidades_estimadas, by= c("ano", "id_modelo"))
data3 <- left_join(df_unidades_estimadas, data3, by= c("ano", "id_modelo"))
data3 <- left_join(total, data3, by= c("ano", "id_modelo"))
View(total)
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
data3 <- left_join(total, data3, by=c("ano"))
data3 <- left_join(data3, total,  by=c("ano"))
unidades_est <- round(exp(market_size$fitted.values))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
total <- data3 %>%
group_by(ano) %>%
summarise(total_unidades = sum(unidades_est))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
data3 <- left_join(data3, total,  by=c("ano"))
data3 <- data3 %>%
mutate(share = unidades_est / total_unidades)
X_logit <- data3 %>% select(share)
Y_logit <- data3 %>% select(-share, -total_unidades, -unidades_est, -quant)
logit_model <- glmnet(x = X_logit, y = Y_logit, family = "binomial")
X_logit <- data3 %>%
select(share) %>%
data.matrix()
Y_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, -quant) %>%
data.matrix()
logit_model <- glmnet(x = X_logit, y = Y_logit, family = "binomial")
Y_logit <- data3 %>%
select(share) %>%
data.matrix()
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, -quant) %>%
data.matrix()
logit_model <- glmnet(x = X_logit, y = Y_logit, family = "binomial")
View(X_logit)
logit_model <- glmnet(x = X_logit, y = Y_logit, family = "multinomial")
table(X_logit)
View(X_logit)
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, -quant) %>%
as.matrix()
Y_logit <- data3 %>%
select(share) %>%
as.matrix()
logit_model <- glmnet(x = X_logit, y = Y_logit, family = "multinomial")
logit_model <- glmnet(X_logit,Y_logit, family = "binomal")
logit_model <- glmnet(X_logit, Y_logit, family = "binomial")
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, quant) %>%
as.matrix()
logit_model <- glmnet(X_logit, Y_logit, family = "binomial")
Y_logit <- data3 %>%
select(share) %>%
data.matrix()
View(X_logit)
View(Y_logit)
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, quant) %>%
data.matrix()
logit_model <- glmnet(X_logit, Y_logit, family = "binomial")
Y_logit <- data3 %>%
select(share) %>%
as.matrix()
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, quant) %>%
data.matrix()
logit_model <- glmnet(X_logit, Y_logit, family = "binomial")
data <- readxl::read_xlsx("base_tcc.xlsx")
colunas_fator <- c("ano", "combust", "modelo", "marca",
"marca_trad","gas","ar","dir","vid","trv","kit conf",
"aut","abs","bag")
data[colunas_fator] <- lapply(data[colunas_fator], factor)
data <- data %>% mutate(tipo_modelo = case_when(POP == 1 ~    1,
COMPAC == 1 ~ 2,
HATCH == 1 ~  3,
SEDPOP == 1 ~ 4,
SEDMED == 1 ~ 5,
SEDLUXO == 1 ~ 6,
MINIVAN == 1 ~ 7,
PERUA == 1 ~ 8
))
data <- data %>% dplyr::select(-ano09, -ano10, -ano11, -ano12, -POP, -COMPAC ,
-HATCH, -SEDPOP, -SEDMED, -SEDLUXO, -MINIVAN, -PERUA)
data <- data %>% mutate(comp = comp * 1000)
modelos <- data.frame(modelo = levels(data$modelo), id_modelo = c(1:length(levels(data$modelo))))
combust <- data.frame(combust = levels(data$combust), id_combust = c(1:length(levels(data$combust))))
marca <- data.frame(marca = levels (data$marca), id_marca = c(1:length(levels(data$marca))))
data <- data %>% mutate(preco = log(preco)) %>% rename(logpreco = preco)
data <- data %>% left_join(., modelos, by = "modelo") %>% select(-modelo) %>%
mutate(id_modelo = as.factor(id_modelo))
data <- data %>% left_join(., combust, by = "combust") %>% select(-combust) %>%
mutate(id_combust = as.factor(id_combust))
data <- data %>% left_join(., marca, by = "marca") %>% select(-marca) %>%
mutate(id_marca = as.factor(id_marca))
data <- data %>% mutate(
id_modelo = as.factor(id_modelo),
id_combust = as.factor(id_combust),
id_marca = as.factor(id_marca),
tipo_modelo = as.factor(tipo_modelo)
)
qntf <- function(a) {
return(length(levels(a)))
}
group <- map2(data, 1:ncol(data), function(.x, .y) {
if(is.null(levels(.x))){
c(rep(.y, 1))
}
else(
c(rep(.y,length(levels(.x))))[-1]
)
}) %>% unlist(use.names= F)
set.seed(123)
#estimando o tamanho do mercado em cada ano
#ou o Market Size
market_size <- lm(log(quant) ~ ano + id_modelo, data=data)
unidades_est <- round(exp(market_size$fitted.values))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
total <- data3 %>%
group_by(ano) %>%
summarise(total_unidades = sum(unidades_est))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
data3 <- left_join(data3, total,  by=c("ano"))
data3 <- data3 %>%
mutate(share = unidades_est / total_unidades)
Y_logit <- data3 %>%
select(share) %>%
as.matrix()
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, quant) %>%
data.matrix()
data3 <- data3 %>%
mutate(across(c(marca_trad, c(starts_with("id")) ), as.factor(.x)))
data3 <- data3 %>%
mutate(across(c(marca_trad, c(starts_with("id")) ), ~ as.factor(.x)))
View(data3)
data3 <- data3 %>%
mutate(across(c(marca_trad, tipo_modelo, c(starts_with("id")) ), ~ as.factor(.x)))
Y_logit <- data3 %>%
select(share) %>%
as.matrix()
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, quant) %>%
data.matrix()
logit_model <- glmnet(X_logit, Y_logit, family = "binomial")
View(X_logit)
View(Y_logit)
Y_logit |> log(.x) |> View()
Y_logit |> log(.) |> View()
Y_logit |> log() |> View()
logit_model <- glmnet(X_logit, Y_logit, family = "multinomial")
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, quant) %>%
as.matrix()
logit_model <- glmnet(X_logit, Y_logit, family = "multinomial")
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, quant) %>%
data.matrix()
logit_model <- glmnet(X_logit, Y_logit, family = "multinomial")
logit_model <- glmnet(X_logit, Y_logit, family = "binomial")
unidades_est <- round(exp(market_size$fitted.values))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
total <- data3 %>%
group_by(ano) %>%
summarise(total_unidades = sum(unidades_est))
data3 <- left_join(data3, total,  by=c("ano"))
data3 <- data3 %>%
mutate(share = unidades_est / total_unidades)
data3 <- data3 %>%
mutate(across(c(marca_trad, tipo_modelo, c(starts_with("id")) ), ~ as.factor(.x)))
Y_logit <- data3 %>%
select(share) %>%
as.matrix()
X_logit <- data3 %>%
select(-share, -total_unidades, -unidades_est, quant) %>%
data.matrix()
logit_model <- glmnet(X_logit, Y_logit, family = "binomial")
logit_model <- glmnet(X_logit, Y_logit, family = "binomial", alpha = 1)
logit_model <- glmnet(X_logit, Y_logit, family = "binomial", alpha = 1)
logit_model <- glmnet(X_logit, Y_logit, alpha = 1)
logit_model <- glmnet(X_logit, Y_logit, family = "binomial", alpha = 1)
Y_logit <- data3 %>%
select(share)
logit_model <- glmnet(X_logit,
Y_logit %>%
if_else(share >= mean(.), 1, 0),
family = "binomial", alpha = 1)
logit_model <- glmnet(X_logit,
Y_logit %>%
if_else(. >= mean(.), 1, 0),
family = "binomial", alpha = 1)
logit_model <- glmnet(X_logit,
Y_logit %>%
if_else(.x >= mean(.x), 1, 0),
family = "binomial", alpha = 1)
logit_model <- glmnet(X_logit,
if_else( Y_logit >= mean(Y_logit), 1, 0),
family = "binomial", alpha = 1)
if_else( Y_logit >= mean(Y_logit), 1, 0)
mean(Y_logit)
mean(Y_logit$share)
logit_model <- glmnet(X_logit,
if_else( Y_logit$share >= mean(Y_logit$share), 1, 0),
family = "binomial", alpha = 1)
coeftest(logit_model, vcov. = vcov, type = "HC1")
View(Y_logit)
unidades_est <- round(exp(market_size$fitted.values))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
library(caret)
library(tidyverse)
library(broom)
library(readxl)
library(glmnet)
library(magrittr)
library(stargazer)
library(gbm)
library(dplyr)
library(lmtest)
library(plm)
unidades_est <- round(exp(market_size$fitted.values))
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
total <- data3 %>%
group_by(ano) %>%
summarise(total_unidades = sum(unidades_est))
data3 <- left_join(data3, total,  by=c("ano"))
data3 <- data3 %>%
mutate(share = log(unidades_est / total_unidades))
# por alguma motivo essas variáveis não estão como factor
data3 <- data3 %>%
mutate(across(c(marca_trad, tipo_modelo, c(starts_with("id")) ), ~ as.factor(.x)))
View(data3)
# por alguma motivo essas variáveis não estão como factor
data3 <- data3 %>%
mutate(across(c(marca_trad, tipo_modelo, c(starts_with("id")) ), ~ as.factor(.x))) %>%
select(-quant)
# por alguma motivo essas variáveis não estão como factor
data3 <- data3 %>%
mutate(across(c(marca_trad, tipo_modelo, c(starts_with("id")) ), ~ as.factor(.x))) %>%
select(-quant, -unidades_est, -total_unidades)
data3 <- data %>%
mutate(unidades_est = round(exp(market_size$fitted.values)))
total <- data3 %>%
group_by(ano) %>%
summarise(total_unidades = sum(unidades_est))
data3 <- left_join(data3, total,  by=c("ano"))
data3 <- data3 %>%
mutate(share = log(unidades_est / total_unidades))
# por alguma motivo essas variáveis não estão como factor
data3 <- data3 %>%
mutate(across(c(marca_trad, tipo_modelo, c(starts_with("id")) ), ~ as.factor(.x))) %>%
select(-quant, -unidades_est, -total_unidades)
df_sample_shares <- sample_frac(data3, 0.8)
train_index <- as.numeric(rownames(df_sample_shares))
test.x <- data[-train_index, ] %>% select(-share) %>% as.matrix()
df_sample_shares <- sample_frac(data3, 0.8)
train_index <- as.numeric(rownames(df_sample_shares))
test.x <- data3[-train_index, ] %>% select(-share) %>% as.matrix()
train.x <- df_sample %>% select(-share)
df_sample_shares <- sample_frac(data3, 0.8)
train_index <- as.numeric(rownames(df_sample_shares))
test.x <- data3[-train_index, ] %>% select(-share) %>% as.matrix()
train.x <- df_sample_shares %>% select(-share)
train.y <- df_sample_shares %>% select(share)
test.y <- data3 %>% select(share) %>% setdiff(train.y) %>% data.matrix(.)
lasso_share_model <- glmnet(train.x, train.y, alpha = 1)
train.y <- df_sample_shares %>% select(share) %>% data.matrix()
test.y <- data3 %>% select(share) %>% setdiff(train.y) %>% data.matrix(.)
lasso_share_model <- glmnet(train.x, train.y %>% data.matrix(), alpha = 1)
lasso_share_cv <- cv.glmnet(train.x, train.y %>% data.matrix(), alpha = 1,
standardize = T, nfolds = 10)
lasso_share_cv <- cv.glmnet(train.x %>% model.matrix(share ~ . - 1 , data = .),
train.y %>% data.matrix(),
alpha = 1,
standardize = T,
nfolds = 10)
lasso_share_cv <- cv.glmnet(train.x %>% model.matrix(~ . - 1 , data = .),
train.y %>% data.matrix(),
alpha = 1,
standardize = T,
nfolds = 10)
best_lamb <- lasso_share_cv$lambda.min
best_lamb
lasso_share_modelo <- glmnet(train.x, train.y %>% data.matrix(), alpha = 1)
predictions_lasso_share <- predict(lasso_share_modelo, newx = test.x)
predictions_lasso_share <- predict(lasso_share_modelo, newx = test.x %>% data.matrix())
test.x <- data3[-train_index, ] %>% select(-share) %>% data.matrix()
predictions_lasso_share <- predict(lasso_share_modelo, newx = test.x)
lasso_share_modelo <- glmnet(train.x, train.y %>% data.matrix(), alpha = 1)
lasso_share_modelo_cv <- glmnet(data.matrix(train.x), y, alpha = 1, lambda = best_lamb_lasso_share_cv$lambda.min)
best_lamb_lasso_share_cv <- lasso_share_cv$lambda.min
lasso_share_modelo_cv <- glmnet(data.matrix(train.x), y, alpha = 1, lambda = best_lamb_lasso_share_cv$lambda.min)
lasso_share_modelo_cv <- glmnet(data.matrix(train.x), y, alpha = 1, lambda = best_lamb_lasso_share_cv)
plot(lasso_share_modelo, xvar = "norm", label = T)
plot(lasso_share_modelo, xvar="lambda")
coef(lasso_share_modelo)
View(train.x)
data3$id_modelo %>% levels()
data3$id_modelo %>% typeof()
data3$id_modelo %>% is.factor()
train.x$id_modelo
predictions_lasso_share <- predict(lasso_share_modelo, newx = test.x)
predictions_cv <- predict(object = modelo_cv, newx = test.x, s = lasso_cv$lambda.min)
plot(lasso_share_modelo_cv, xvar = "norm", label = T)
plot(lasso_share_modelo_cv,xvar="lambda")
coef(lasso_share_modelo_cv)
plot(modelo_lasso, xvar = "norm", label = T)
lasso_share_modelo <- glmnet(data.matrix(train.x), train.y %>% data.matrix(), alpha = 1)
plot(lasso_share_modelo, xvar = "norm", label = T)
plot(lasso_share_modelo, xvar="lambda")
View(train.y)
lasso_share_cv <- cv.glmnet(train.x %>% model.matrix(~ . - 1 , data = .),
train.y %>% data.matrix(),
alpha = 1,
nfolds = 10)
plot(lasso_share_modelo, xvar = "norm", label = T)
plot(lasso_share_modelo, xvar="lambda")
plot(lasso_share_modelo_cv, xvar = "norm", label = T)
plot(lasso_share_modelo_cv,xvar="lambda")
coef(lasso_share_modelo_cv)
RMSE(test.y, predictions_lasso_share)
RMSE(test.y[1:103], predictions_lasso_share)
length(predictions_lasso_share)
RMSE(test.y, predictions_lasso_share)
[1:103]
RMSE(test.y[1:103], predictions_lasso_share)
RMSE(test.y[1:129], predictions_lasso_share)
RMSE(test.y[1:103], pred = predictions_lasso_share)
View(predictions_lasso_share)
RMSE(predictions_lasso_share, test.y)
?RMSE()
predictions_lasso_share_cv <- predict(object = modelo_cv, newx = test.x, s = best_lamb_lasso_share_cv)
RMSE(test.y[1:103], predictions_lasso_share_cv)
